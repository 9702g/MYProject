{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":7574732,"sourceType":"datasetVersion","datasetId":4410234}],"dockerImageVersionId":30646,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-02-06T21:17:05.661429Z","iopub.execute_input":"2024-02-06T21:17:05.661828Z","iopub.status.idle":"2024-02-06T21:17:05.676043Z","shell.execute_reply.started":"2024-02-06T21:17:05.661772Z","shell.execute_reply":"2024-02-06T21:17:05.674759Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt \nimport seaborn as sns \nimport sklearn.datasets \nfrom sklearn.model_selection import train_test_split\nfrom xgboost import XGBRegressor \nfrom sklearn import metrics\n","metadata":{"execution":{"iopub.status.busy":"2024-02-06T21:17:05.678071Z","iopub.execute_input":"2024-02-06T21:17:05.679215Z","iopub.status.idle":"2024-02-06T21:17:05.685730Z","shell.execute_reply.started":"2024-02-06T21:17:05.679177Z","shell.execute_reply":"2024-02-06T21:17:05.684502Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data=pd.read_csv('/kaggle/input/clean-kenya-dataset/Clean_Kenya_Tourism_datasets (2).csv')","metadata":{"execution":{"iopub.status.busy":"2024-02-06T21:17:05.688402Z","iopub.execute_input":"2024-02-06T21:17:05.688889Z","iopub.status.idle":"2024-02-06T21:17:05.720372Z","shell.execute_reply.started":"2024-02-06T21:17:05.688845Z","shell.execute_reply":"2024-02-06T21:17:05.719256Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.head(10)","metadata":{"execution":{"iopub.status.busy":"2024-02-06T21:17:05.722884Z","iopub.execute_input":"2024-02-06T21:17:05.723356Z","iopub.status.idle":"2024-02-06T21:17:05.759840Z","shell.execute_reply.started":"2024-02-06T21:17:05.723317Z","shell.execute_reply":"2024-02-06T21:17:05.758284Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#checking the columns in the training dataset\ndata.columns","metadata":{"execution":{"iopub.status.busy":"2024-02-06T21:17:05.761294Z","iopub.execute_input":"2024-02-06T21:17:05.761652Z","iopub.status.idle":"2024-02-06T21:17:05.770067Z","shell.execute_reply.started":"2024-02-06T21:17:05.761618Z","shell.execute_reply":"2024-02-06T21:17:05.769012Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#checking the information of the training dataset\ndata.info()","metadata":{"execution":{"iopub.status.busy":"2024-02-06T21:17:05.773295Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#step 2 is to clean the data\n#replacing the nan values in the travel_with column of the training data with Alone\n\ndata['travel_with'] = data['travel_with'].replace(np.nan, 'Alone')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#replacing the nan values in the total_female column of the training data with 1.0\n\ndata['total_female'] = data['total_female'].replace(np.nan, 1.0)\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#replacing the nan values in the total_male column of the training data with 1.0\n\ndata['total_male'] = data['total_male'].replace(np.nan, 1.0)\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#replacing the nan values in the most_impressing column of the training data with No comments\n\ndata['most_impressing'] = data['most_impressing'].replace(np.nan, 'No comments')\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#replacing 24-jan to 1-24 to correlate with \n\ndata['age_group'] = data['age_group'].replace('24-Jan', '1-24')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# %convert float dtypes to int[total_female,total_male,night_mainland,night_zanzibar]\ndata[\"total_female\"] = data['total_female'].astype('int')\ndata[\"total_male\"] = data['total_male'].astype('int')\ndata[\"nights_spent\"] = data['nights_spent'].astype('int')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# %Let's generate new features from some columns which makes some sense\ndata[\"total_people\"] = data[\"total_female\"] + data[\"total_male\"]\n\ndata[\"total_nights\"] = data[\"nights_spent\"] ","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.shape ","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#chech for missing values\ndata.isnull().sum()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#statistical measures of the data\ndata.describe()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Understanding the correlation between various features in the dataset.\n1) positive correlation\n2)negative Correlation\n","metadata":{}},{"cell_type":"code","source":"encoded_data = pd.get_dummies(data)\ncorrelation = encoded_data.corr()\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#constructing heatmap to understand the correlation\n#plt.figure(figsize=(10,10))\n#sns.heatmap(correlation, cbar=True, square=True, fmt='.2f', annot=True, annot_kws={'size': 8}, cmap='Blues')\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# %then it's time to encode objects into numeric\n\nfor colname in data.select_dtypes(\"object\"):\n    data[colname],_=data[colname].factorize()\n# Now all columns that can be converted to numeric have been converted\n","metadata":{"execution":{"iopub.status.busy":"2024-02-06T22:08:09.442901Z","iopub.execute_input":"2024-02-06T22:08:09.443334Z","iopub.status.idle":"2024-02-06T22:08:09.450703Z","shell.execute_reply.started":"2024-02-06T22:08:09.443302Z","shell.execute_reply":"2024-02-06T22:08:09.449352Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Step 3 model building\nimport warnings\nwarnings.filterwarnings('ignore')","metadata":{"execution":{"iopub.status.busy":"2024-02-06T22:09:31.955889Z","iopub.execute_input":"2024-02-06T22:09:31.956266Z","iopub.status.idle":"2024-02-06T22:09:31.961942Z","shell.execute_reply.started":"2024-02-06T22:09:31.956239Z","shell.execute_reply":"2024-02-06T22:09:31.960617Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.head()\n","metadata":{"execution":{"iopub.status.busy":"2024-02-06T22:09:49.998468Z","iopub.execute_input":"2024-02-06T22:09:49.998982Z","iopub.status.idle":"2024-02-06T22:09:50.025231Z","shell.execute_reply.started":"2024-02-06T22:09:49.998942Z","shell.execute_reply":"2024-02-06T22:09:50.023906Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"x=data.drop(['total_cost'], axis=1)\ny=data['total_cost']","metadata":{"execution":{"iopub.status.busy":"2024-02-06T22:14:43.475546Z","iopub.execute_input":"2024-02-06T22:14:43.476018Z","iopub.status.idle":"2024-02-06T22:14:43.484378Z","shell.execute_reply.started":"2024-02-06T22:14:43.475983Z","shell.execute_reply":"2024-02-06T22:14:43.482904Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(x)\nprint(y)","metadata":{"execution":{"iopub.status.busy":"2024-02-06T22:14:57.468332Z","iopub.execute_input":"2024-02-06T22:14:57.468754Z","iopub.status.idle":"2024-02-06T22:14:57.489297Z","shell.execute_reply.started":"2024-02-06T22:14:57.468720Z","shell.execute_reply":"2024-02-06T22:14:57.487857Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(y)","metadata":{"execution":{"iopub.status.busy":"2024-02-06T22:15:13.139263Z","iopub.execute_input":"2024-02-06T22:15:13.139666Z","iopub.status.idle":"2024-02-06T22:15:13.147976Z","shell.execute_reply.started":"2024-02-06T22:15:13.139635Z","shell.execute_reply":"2024-02-06T22:15:13.146896Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\ndata.shape","metadata":{"execution":{"iopub.status.busy":"2024-02-06T22:16:21.127160Z","iopub.execute_input":"2024-02-06T22:16:21.127551Z","iopub.status.idle":"2024-02-06T22:16:21.135352Z","shell.execute_reply.started":"2024-02-06T22:16:21.127521Z","shell.execute_reply":"2024-02-06T22:16:21.134124Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data[cols].shape","metadata":{"execution":{"iopub.status.busy":"2024-02-06T22:16:36.325712Z","iopub.execute_input":"2024-02-06T22:16:36.326124Z","iopub.status.idle":"2024-02-06T22:16:36.335720Z","shell.execute_reply.started":"2024-02-06T22:16:36.326095Z","shell.execute_reply":"2024-02-06T22:16:36.334395Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"x.shape","metadata":{"execution":{"iopub.status.busy":"2024-02-06T22:16:53.635495Z","iopub.execute_input":"2024-02-06T22:16:53.636044Z","iopub.status.idle":"2024-02-06T22:16:53.643819Z","shell.execute_reply.started":"2024-02-06T22:16:53.636003Z","shell.execute_reply":"2024-02-06T22:16:53.642426Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y.shape","metadata":{"execution":{"iopub.status.busy":"2024-02-06T22:17:01.027688Z","iopub.execute_input":"2024-02-06T22:17:01.028245Z","iopub.status.idle":"2024-02-06T22:17:01.038456Z","shell.execute_reply.started":"2024-02-06T22:17:01.028202Z","shell.execute_reply":"2024-02-06T22:17:01.037064Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#splitting the data into training data and test data\nx_train,x_test,y_train,y_test = train_test_split(x,y, test_size= 0.2,random_state= 2)","metadata":{"execution":{"iopub.status.busy":"2024-02-06T22:17:43.723951Z","iopub.execute_input":"2024-02-06T22:17:43.724355Z","iopub.status.idle":"2024-02-06T22:17:43.736523Z","shell.execute_reply.started":"2024-02-06T22:17:43.724324Z","shell.execute_reply":"2024-02-06T22:17:43.735121Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(x.shape,x_train.shape,x_test.shape)","metadata":{"execution":{"iopub.status.busy":"2024-02-06T22:19:36.140852Z","iopub.execute_input":"2024-02-06T22:19:36.141296Z","iopub.status.idle":"2024-02-06T22:19:36.148130Z","shell.execute_reply.started":"2024-02-06T22:19:36.141265Z","shell.execute_reply":"2024-02-06T22:19:36.146856Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#model Training\n#XGBOOST REGRESSOR\n#loading the model\nmodel=XGBRegressor()","metadata":{"execution":{"iopub.status.busy":"2024-02-06T22:21:13.575906Z","iopub.execute_input":"2024-02-06T22:21:13.576662Z","iopub.status.idle":"2024-02-06T22:21:13.582490Z","shell.execute_reply.started":"2024-02-06T22:21:13.576609Z","shell.execute_reply":"2024-02-06T22:21:13.581395Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#training the model with x_train\n# Instantiate an object of XGBModel class\nmodel = XGBRegressor()\n\n# Call the fit method on the instantiated object\nmodel.fit(X=x_train, y=y_train)\n\n\n","metadata":{"execution":{"iopub.status.busy":"2024-02-06T22:28:42.499249Z","iopub.execute_input":"2024-02-06T22:28:42.499690Z","iopub.status.idle":"2024-02-06T22:28:42.651726Z","shell.execute_reply.started":"2024-02-06T22:28:42.499655Z","shell.execute_reply":"2024-02-06T22:28:42.650781Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Evaluation \ntraining_data_prediction=model.predict(x_train)","metadata":{"execution":{"iopub.status.busy":"2024-02-06T22:30:37.398650Z","iopub.execute_input":"2024-02-06T22:30:37.399056Z","iopub.status.idle":"2024-02-06T22:30:37.419438Z","shell.execute_reply.started":"2024-02-06T22:30:37.399025Z","shell.execute_reply":"2024-02-06T22:30:37.418521Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#accuracy for prediction on training data ,the prices in ksh \nprint(training_data_prediction)","metadata":{"execution":{"iopub.status.busy":"2024-02-06T22:30:55.997596Z","iopub.execute_input":"2024-02-06T22:30:55.997996Z","iopub.status.idle":"2024-02-06T22:30:56.004975Z","shell.execute_reply.started":"2024-02-06T22:30:55.997957Z","shell.execute_reply":"2024-02-06T22:30:56.003659Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#R squared error \nscore_1=metrics.r2_score(y_train,training_data_prediction)\n#find the variants btwn both \n#mean absolute error \nscore_2= metrics.mean_absolute_error(y_train,training_data_prediction)\n#find difference and give mean\nprint('R squared error :', score_1)\nprint('Mean absolute Error:', score_2)\n      ","metadata":{"execution":{"iopub.status.busy":"2024-02-06T22:36:55.915924Z","iopub.execute_input":"2024-02-06T22:36:55.916301Z","iopub.status.idle":"2024-02-06T22:36:55.924626Z","shell.execute_reply.started":"2024-02-06T22:36:55.916272Z","shell.execute_reply":"2024-02-06T22:36:55.923533Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#prediction on training data\ntest_data_prediction=model.predict(x_test)","metadata":{"execution":{"iopub.status.busy":"2024-02-06T22:41:20.382132Z","iopub.execute_input":"2024-02-06T22:41:20.382530Z","iopub.status.idle":"2024-02-06T22:41:20.399057Z","shell.execute_reply.started":"2024-02-06T22:41:20.382501Z","shell.execute_reply":"2024-02-06T22:41:20.397895Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#R squared error \nscore_1=metrics.r2_score(y_test,test_data_prediction)\n#find the variants btwn both \n#mean absolute error \nscore_2= metrics.mean_absolute_error(y_test,test_data_prediction)\n#find difference and give mean\nprint('R squared error :', score_1)\nprint('Mean absolute Error:', score_2)","metadata":{"execution":{"iopub.status.busy":"2024-02-06T22:42:15.486462Z","iopub.execute_input":"2024-02-06T22:42:15.486924Z","iopub.status.idle":"2024-02-06T22:42:15.497709Z","shell.execute_reply.started":"2024-02-06T22:42:15.486887Z","shell.execute_reply":"2024-02-06T22:42:15.495907Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#visualizing the actual prices and predicted prices\n#y train and y test\nplt.scatter(y_train,training_data_prediction)\nplt.xlabel(\"Actual prices\")\nplt.ylabel(\"predicted prices\")\nplt.title('Actual price vs predicted price')\nplt.show","metadata":{"execution":{"iopub.status.busy":"2024-02-06T22:45:29.003591Z","iopub.execute_input":"2024-02-06T22:45:29.004024Z","iopub.status.idle":"2024-02-06T22:45:29.242926Z","shell.execute_reply.started":"2024-02-06T22:45:29.003990Z","shell.execute_reply":"2024-02-06T22:45:29.242013Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nplt.figure(figsize=(15,7))\n\nplt.scatter(y_train,training_data_prediction,\n          c = 'black', marker = 'o', s = 50, alpha = 0.5,\n          label = 'Train data')\nplt.scatter(y_test,test_data_prediction,\n          c = 'g', marker = 'o', s = 50, alpha = 0.7,\n          label = 'Test data')\nplt.xlabel('Predicted values')\nplt.ylabel('Tailings')\nplt.legend(loc = 'upper right')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-02-06T22:50:12.651234Z","iopub.execute_input":"2024-02-06T22:50:12.651678Z","iopub.status.idle":"2024-02-06T22:50:12.979885Z","shell.execute_reply.started":"2024-02-06T22:50:12.651645Z","shell.execute_reply":"2024-02-06T22:50:12.978910Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Let's Visualize on the best contributed features\nfeat_importances = pd.Series(XGB_par.feature_importances_, index=cols)\nplt.figure(figsize=(15,10))\nplt.title(\"FEATURE IMPORTANCE PLOT\")\nfeat_importances.nlargest(18).plot(kind='barh')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-02-06T22:47:35.021841Z","iopub.execute_input":"2024-02-06T22:47:35.022269Z","iopub.status.idle":"2024-02-06T22:47:35.415060Z","shell.execute_reply.started":"2024-02-06T22:47:35.022236Z","shell.execute_reply":"2024-02-06T22:47:35.413839Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"from sklearn.tree import DecisionTreeClassifier \n\n# Initialize the DecisionTreeClassifier\nmodel = DecisionTreeClassifier()\n\n# Train the model\nmodel.fit(X=x_train, y=y_train)\n\n\n\nimport pickle\n\n# Open the file in write binary mode and dump the model\nwith open('classifier.pkl', 'wb') as file:\n    pickle.dump(model, file)\n    \n\n","metadata":{"execution":{"iopub.status.busy":"2024-02-07T01:22:31.286897Z","iopub.execute_input":"2024-02-07T01:22:31.287749Z","iopub.status.idle":"2024-02-07T01:22:31.317107Z","shell.execute_reply.started":"2024-02-07T01:22:31.287707Z","shell.execute_reply":"2024-02-07T01:22:31.315681Z"},"trusted":true},"execution_count":12,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[12], line 7\u001b[0m\n\u001b[1;32m      4\u001b[0m model \u001b[38;5;241m=\u001b[39m DecisionTreeClassifier()\n\u001b[1;32m      6\u001b[0m \u001b[38;5;66;03m# Train the model\u001b[39;00m\n\u001b[0;32m----> 7\u001b[0m model\u001b[38;5;241m.\u001b[39mfit(X\u001b[38;5;241m=\u001b[39m\u001b[43mx_train\u001b[49m, y\u001b[38;5;241m=\u001b[39my_train)\n\u001b[1;32m     11\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mpickle\u001b[39;00m\n\u001b[1;32m     13\u001b[0m \u001b[38;5;66;03m# Open the file in write binary mode and dump the model\u001b[39;00m\n","\u001b[0;31mNameError\u001b[0m: name 'x_train' is not defined"],"ename":"NameError","evalue":"name 'x_train' is not defined","output_type":"error"}]},{"cell_type":"code","source":"!pip install streamlit\n!npm install localtunnel","metadata":{"execution":{"iopub.status.busy":"2024-02-06T23:45:01.830693Z","iopub.execute_input":"2024-02-06T23:45:01.831107Z"},"trusted":true},"execution_count":null,"outputs":[{"name":"stdout","text":"\u001b[33mWARNING: Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<pip._vendor.urllib3.connection.HTTPSConnection object at 0x7f6ed6741e40>: Failed to establish a new connection: [Errno -3] Temporary failure in name resolution')': /simple/streamlit/\u001b[0m\u001b[33m\n\u001b[0m\u001b[33mWARNING: Retrying (Retry(total=3, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<pip._vendor.urllib3.connection.HTTPSConnection object at 0x7f6ed6742140>: Failed to establish a new connection: [Errno -3] Temporary failure in name resolution')': /simple/streamlit/\u001b[0m\u001b[33m\n\u001b[0m\u001b[33mWARNING: Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<pip._vendor.urllib3.connection.HTTPSConnection object at 0x7f6ed67423e0>: Failed to establish a new connection: [Errno -3] Temporary failure in name resolution')': /simple/streamlit/\u001b[0m\u001b[33m\n\u001b[0m\u001b[33mWARNING: Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<pip._vendor.urllib3.connection.HTTPSConnection object at 0x7f6ed6742590>: Failed to establish a new connection: [Errno -3] Temporary failure in name resolution')': /simple/streamlit/\u001b[0m\u001b[33m\n\u001b[0m\u001b[33mWARNING: Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<pip._vendor.urllib3.connection.HTTPSConnection object at 0x7f6ed6742740>: Failed to establish a new connection: [Errno -3] Temporary failure in name resolution')': /simple/streamlit/\u001b[0m\u001b[33m\n\u001b[0m\u001b[31mERROR: Could not find a version that satisfies the requirement streamlit (from versions: none)\u001b[0m\u001b[31m\n\u001b[0m\u001b[31mERROR: No matching distribution found for streamlit\u001b[0m\u001b[31m\n[\u001b[100;90m..................\u001b[0m] | idealTree:working: \u001b[7msill\u001b[0m \u001b[35midealTree\u001b[0m buildDeps\u001b[0m\u001b[Kd in 1ms\u001b[0m\u001b[K\r","output_type":"stream"}]}]}